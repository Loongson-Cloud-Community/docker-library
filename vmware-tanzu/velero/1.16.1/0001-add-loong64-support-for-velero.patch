From ce3c2e888df969848729eb13b5004b87cf1b3dc7 Mon Sep 17 00:00:00 2001
From: Wenlong Zhang <zhangwenlong@loongson.cn>
Date: Fri, 25 Jul 2025 17:43:37 +0800
Subject: [PATCH] add loong64 support for velero

---
 Dockerfile                  | 10 ++++++---
 Makefile                    | 10 +++++----
 hack/build-image/Dockerfile | 42 +++++++++++++++++++++++++------------
 hack/build.sh               |  2 +-
 4 files changed, 43 insertions(+), 21 deletions(-)

diff --git a/Dockerfile b/Dockerfile
index 4f98162..2f0079c 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -13,7 +13,8 @@
 # limitations under the License.
 
 # Velero binary build section
-FROM --platform=$BUILDPLATFORM golang:1.23.8-bookworm AS velero-builder
+#FROM --platform=$BUILDPLATFORM golang:1.23.8-bookworm AS velero-builder
+FROM --platform=$BUILDPLATFORM lcr.loongnix.cn/library/golang:1.23-buster AS velero-builder
 
 ARG GOPROXY
 ARG BIN
@@ -49,7 +50,8 @@ RUN mkdir -p /output/usr/bin && \
     go clean -modcache -cache
 
 # Restic binary build section
-FROM --platform=$BUILDPLATFORM golang:1.23.8-bookworm AS restic-builder
+#FROM --platform=$BUILDPLATFORM golang:1.23.8-bookworm AS restic-builder
+FROM --platform=$BUILDPLATFORM lcr.loongnix.cn/library/golang:1.23-buster AS restic-builder
 
 ARG GOPROXY
 ARG BIN
@@ -67,13 +69,15 @@ ENV CGO_ENABLED=0 \
 
 COPY . /go/src/github.com/vmware-tanzu/velero
 
+RUN apt-get update && apt-get install git -y
 RUN mkdir -p /output/usr/bin && \
     export GOARM=$(echo "${GOARM}" | cut -c2-) && \
     /go/src/github.com/vmware-tanzu/velero/hack/build-restic.sh && \
     go clean -modcache -cache
 
 # Velero image packing section
-FROM paketobuildpacks/run-jammy-tiny:0.2.60
+#FROM paketobuildpacks/run-jammy-tiny:0.2.60
+FROM lcr.loongnix.cn/paketobuildpacks/run-jammy-tiny:latest
 
 LABEL maintainer="Xun Jiang <jxun@vmware.com>"
 
diff --git a/Makefile b/Makefile
index f75ca17..510c866 100644
--- a/Makefile
+++ b/Makefile
@@ -71,7 +71,7 @@ HUGO_IMAGE := hugo-builder
 # if the 'local' rule is being run, detect the ARCH from 'go env'
 # if it wasn't specified by the caller.
 local : ARCH ?= $(shell go env GOOS)-$(shell go env GOARCH)
-ARCH ?= linux-amd64
+ARCH ?= linux-loong64
 
 VERSION ?= main
 
@@ -145,7 +145,8 @@ endif
 platform_temp = $(subst -, ,$(ARCH))
 GOOS = $(word 1, $(platform_temp))
 GOARCH = $(word 2, $(platform_temp))
-GOPROXY ?= https://proxy.golang.org
+#GOPROXY ?= https://proxy.golang.org
+GOPROXY ?= https://goproxy.cn,direct
 GOBIN=$$(pwd)/.go/bin
 
 # If you want to build all binaries, see the 'all-build' rule.
@@ -203,6 +204,7 @@ shell: build-dirs build-env
 	@docker run \
 		-e GOFLAGS \
 		-e GOPROXY \
+		-e https_proxy=http://10.130.0.14:7890 \
 		-i $(TTY) \
 		--rm \
 		-u $$(id -u):$$(id -g) \
@@ -249,10 +251,10 @@ container-linux-%:
 container-linux:
 	@echo "building container: $(IMAGE):$(VERSION)-linux-$(BUILDX_ARCH)"
 
-	@docker buildx build --pull \
+	@docker build \
 	--output="type=$(BUILD_OUTPUT_TYPE)$(if $(findstring tar, $(BUILD_OUTPUT_TYPE)),$(comma)dest=_output/$(BIN)-$(VERSION)-linux-$(BUILDX_ARCH).tar,)" \
 	--platform="linux/$(BUILDX_ARCH)" \
-	$(addprefix -t , $(addsuffix "-linux-$(BUILDX_ARCH)",$(ALL_IMAGE_TAGS))) \
+	-t lcr.loongnix.cn/velero/velero:release-1.16-dev-linux-loong64 \
 	--build-arg=GOPROXY=$(GOPROXY) \
 	--build-arg=PKG=$(PKG) \
 	--build-arg=BIN=$(BIN) \
diff --git a/hack/build-image/Dockerfile b/hack/build-image/Dockerfile
index d4d0807..1fd8824 100644
--- a/hack/build-image/Dockerfile
+++ b/hack/build-image/Dockerfile
@@ -12,7 +12,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-FROM --platform=$TARGETPLATFORM golang:1.23.8-bookworm
+#FROM --platform=$TARGETPLATFORM golang:1.23.8-bookworm
+FROM --platform=$TARGETPLATFORM lcr.loongnix.cn/library/golang:1.23-buster
 
 ARG GOPROXY
 
@@ -21,12 +22,18 @@ ENV GO111MODULE=on
 ENV GOPROXY=${GOPROXY}
 
 # kubebuilder test bundle is separated from kubebuilder. Need to setup it for CI test.
-RUN curl -sSLo envtest-bins.tar.gz https://go.kubebuilder.io/test-tools/1.22.1/linux/$(go env GOARCH) && \
+#RUN curl -sSLo envtest-bins.tar.gz https://go.kubebuilder.io/test-tools/1.22.1/linux/$(go env GOARCH) && \
+#    mkdir /usr/local/kubebuilder && \
+#    tar -C /usr/local/kubebuilder --strip-components=1 -zvxf envtest-bins.tar.gz
+RUN wget https://cloud.loongnix.cn/releases/loongarch64/kubernetes/kubernetes/v1.21.1/kubernetes-server-linux-loong64.tar.gz && \
     mkdir /usr/local/kubebuilder && \
-    tar -C /usr/local/kubebuilder --strip-components=1 -zvxf envtest-bins.tar.gz
+    tar -C /usr/local/kubebuilder --strip-components=2 -zvxf kubernetes-server-linux-loong64.tar.gz
 
-RUN wget --quiet https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.2.0/kubebuilder_linux_$(go env GOARCH) && \
-    mv kubebuilder_linux_$(go env GOARCH) /usr/local/kubebuilder/bin/kubebuilder && \
+#RUN wget --quiet https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.2.0/kubebuilder_linux_$(go env GOARCH) && \
+#    mv kubebuilder_linux_$(go env GOARCH) /usr/local/kubebuilder/bin/kubebuilder && \
+#    chmod +x /usr/local/kubebuilder/bin/kubebuilder
+RUN wget https://cloud.loongnix.cn/releases/loongarch64/kubernetes-sigs/kubebuilder/v3.0.0/kubebuilder && \
+    mv kubebuilder /usr/local/kubebuilder/bin/kubebuilder && \
     chmod +x /usr/local/kubebuilder/bin/kubebuilder
 
 # get controller-tools
@@ -38,7 +45,8 @@ RUN go install golang.org/x/tools/cmd/goimports@11e9d9cc0042e6bd10337d4d2c3e5d92
 
 # get protoc compiler and golang plugin
 WORKDIR /root
-RUN apt-get update && apt-get install -y unzip
+#RUN apt-get update && apt-get install -y unzip
+RUN export https_proxy=http://10.130.0.14:7890 && apt-get update && apt-get install -y unzip curl
 # protobuf uses bazel cpunames except following
 #   if cpu == "systemz":
 #   cpu = "s390_64"
@@ -57,11 +65,14 @@ RUN ARCH=$(go env GOARCH) && \
         ARCH="ppcle_64"; \
     elif [ "$ARCH" = "ppc64" ] ; then \
         ARCH="ppcle_64"; \
+    elif [ "$ARCH" = "loongarch64" ] ; then \
+        ARCH="loong64"; \
     else \
         ARCH=$(uname -m); \
     fi && echo "ARCH=$ARCH" && \
-    wget --quiet https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-$ARCH.zip && \
-    unzip protoc-25.2-linux-$ARCH.zip; \
+    #wget --quiet https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-$ARCH.zip && \
+    wget --quiet http://10.130.0.141/releases/loongarch64/protocolbuffers%2Fprotoc/21.5/protoc-21.5-linux-loongarch_64.zip && \
+    unzip protoc-21.5-linux-loongarch_64.zip ; \
     rm *.zip && \
     mv bin/protoc /usr/bin/protoc && \
     mv include/google /usr/include && \
@@ -87,9 +98,12 @@ RUN ARCH=$(go env GOARCH) && \
         ARCH="i386"; \
     elif [ "$ARCH" = "ppc64le" ] ; then \
         ARCH="ppc64"; \
+    elif [ "$ARCH" = "loongarch64" ] ; then \
+        ARCH="loong64"; \
     fi && \
-    wget --quiet "https://github.com/goreleaser/goreleaser/releases/download/v1.26.2/goreleaser_Linux_$ARCH.tar.gz" && \
-    tar xvf goreleaser_Linux_$ARCH.tar.gz; \
+    #wget --quiet "https://github.com/goreleaser/goreleaser/releases/download/v1.26.2/goreleaser_Linux_$ARCH.tar.gz" && \
+    wget --quiet "http://10.130.0.141/releases/loongarch64/goreleaser%2F1.26.2/goreleaser_Linux_loongarch64.tar.gz" && \
+    tar xvf goreleaser_Linux_loongarch64.tar.gz; \
     mv goreleaser /usr/bin/goreleaser && \
     chmod +x /usr/bin/goreleaser
 
@@ -97,9 +111,11 @@ RUN ARCH=$(go env GOARCH) && \
 RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.5
 
 # install kubectl
-RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(go env GOARCH)/kubectl
-RUN chmod +x ./kubectl
-RUN mv ./kubectl /usr/local/bin
+#RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(go env GOARCH)/kubectl
+#RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(go env GOARCH)/kubectl
+#RUN chmod +x ./kubectl
+RUN chmod +x /usr/local/kubebuilder/bin/kubectl
+RUN mv /usr/local/kubebuilder/bin/kubectl /usr/local/bin
 
 # Fix the "dubious ownership" issue from git when running goreleaser.sh
 RUN echo "[safe] \n\t directory = *" > /.gitconfig
diff --git a/hack/build.sh b/hack/build.sh
index 064b583..f9e3661 100755
--- a/hack/build.sh
+++ b/hack/build.sh
@@ -80,7 +80,7 @@ if [[ "${GOOS}" = "windows" ]]; then
   OUTPUT="${OUTPUT}.exe"
 fi
 
-go build \
+go build -mod=vendor \
     -o ${OUTPUT} \
     -gcflags "${GCFLAGS}" \
     -installsuffix "static" \
-- 
2.41.0

